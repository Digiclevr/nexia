'use client'

import React from 'react'
import { 
  Activity, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  XCircle,
  Bell,
  RefreshCw
} from 'lucide-react'
import { useQuery } from '@tanstack/react-query'
import { nexiaApi } from '@/lib/api'
import { useCurrentTime } from '@/hooks/useCurrentTime'

export default function AlertsPage() {
  const { currentTime } = useCurrentTime()
  
  // Fetch alerts data
  const { data: alertsData, isLoading } = useQuery({
    queryKey: ['alerts-data'],
    queryFn: () => nexiaApi.fetchActiveAlerts(),
    refetchInterval: 5000,
    retry: 3,
    retryDelay: 1000
  });

  const alerts = alertsData?.data || {};

  const activeAlerts = [
    {
      id: 'ALERT-001',
      title: 'Latence élevée - OnlyOneAPI',
      description: 'Temps de réponse API > 2000ms détecté',
      severity: 'warning',
      ecosystem: 'OnlyOneAPI',
      timestamp: '14:23:45',
      duration: '12 min',
      status: 'active'
    },
    {
      id: 'ALERT-002',
      title: 'Mémoire critique - Business-Automation',
      description: 'Utilisation mémoire > 90%',
      severity: 'critical',
      ecosystem: 'Business-Automation',
      timestamp: '14:15:22',
      duration: '8 min',
      status: 'active'
    },
    {
      id: 'ALERT-003',
      title: 'Service indisponible - KREACH',
      description: 'Service KREACH ne répond plus',
      severity: 'critical',
      ecosystem: 'BlueOcean',
      timestamp: '14:12:10',
      duration: '15 min',
      status: 'active'
    }
  ]

  const resolvedAlerts = [
    {
      id: 'ALERT-004',
      title: 'Disque plein - NEXTSTEP',
      description: 'Espace disque critique résolu',
      severity: 'warning',
      ecosystem: 'BlueOcean',
      timestamp: '13:45:33',
      resolvedAt: '14:02:15',
      duration: '17 min',
      status: 'resolved'
    },
    {
      id: 'ALERT-005',
      title: 'Base de données lente',
      description: 'Requêtes lentes PostgreSQL',
      severity: 'warning',
      ecosystem: 'Shared Infrastructure',
      timestamp: '13:20:11',
      resolvedAt: '13:35:44',
      duration: '15 min',
      status: 'resolved'
    }
  ]

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-4 w-4 text-red-500" />
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />
      case 'info': return <Bell className="h-4 w-4 text-blue-500" />
      default: return <Activity className="h-4 w-4 text-gray-500" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100 border-red-200'
      case 'warning': return 'text-yellow-600 bg-yellow-100 border-yellow-200'
      case 'info': return 'text-blue-600 bg-blue-100 border-blue-200'
      default: return 'text-gray-600 bg-gray-100 border-gray-200'
    }
  }

  return (
    <div className="h-screen flex flex-col overflow-hidden">
      {/* Header Compact */}
      <header className="bg-white border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between px-2 lg:px-4 py-2">
          <div className="flex items-center min-w-0">
            <AlertTriangle className="h-4 w-4 lg:h-5 lg:w-5 text-red-600 mr-2" />
            <div className="min-w-0">
              <h1 className="text-sm lg:text-lg font-semibold text-gray-900 truncate">Alertes & Incidents</h1>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <div className="text-right hidden sm:block">
              <p className="text-xs text-gray-500">{currentTime}</p>
            </div>
            <button className="px-2 py-1 text-xs font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded hover:bg-blue-100">
              <RefreshCw className="h-3 w-3 mr-1 inline" />
              Actualiser
            </button>
          </div>
        </div>
      </header>

      {/* Main Content - No Scroll Layout */}
      <div className="flex-1 overflow-hidden p-2 lg:p-3">
        
        {/* Stats Overview */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-2 mb-2 h-1/6">
          <div className="bg-white p-2 rounded border border-gray-200">
            <div className="flex items-center justify-between h-full">
              <div className="min-w-0">
                <p className="text-xs font-medium text-gray-600 truncate">Alertes Actives</p>
                <p className="text-lg font-bold text-red-600">3</p>
              </div>
              <AlertTriangle className="h-5 w-5 text-red-600 flex-shrink-0" />
            </div>
          </div>
          
          <div className="bg-white p-2 rounded border border-gray-200">
            <div className="flex items-center justify-between h-full">
              <div className="min-w-0">
                <p className="text-xs font-medium text-gray-600 truncate">Critiques</p>
                <p className="text-lg font-bold text-red-600">2</p>
              </div>
              <XCircle className="h-5 w-5 text-red-600 flex-shrink-0" />
            </div>
          </div>
          
          <div className="bg-white p-2 rounded border border-gray-200">
            <div className="flex items-center justify-between h-full">
              <div className="min-w-0">
                <p className="text-xs font-medium text-gray-600 truncate">Résolues</p>
                <p className="text-lg font-bold text-green-600">12</p>
              </div>
              <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0" />
            </div>
          </div>
          
          <div className="bg-white p-2 rounded border border-gray-200">
            <div className="flex items-center justify-between h-full">
              <div className="min-w-0">
                <p className="text-xs font-medium text-gray-600 truncate">Temps Résolution</p>
                <p className="text-lg font-bold text-blue-600">14 min</p>
              </div>
              <Clock className="h-5 w-5 text-blue-600 flex-shrink-0" />
            </div>
          </div>
        </div>

        {/* Alerts Sections */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-2 h-5/6">
          
          {/* Active Alerts */}
          <div className="bg-white border border-gray-200 rounded p-2">
            <div className="flex items-center justify-between mb-2">
              <h2 className="text-sm font-semibold text-gray-900">Alertes Actives</h2>
              <span className="px-2 py-0.5 text-xs font-medium bg-red-100 text-red-600 rounded">
                {activeAlerts.length} active
              </span>
            </div>
            <div className="space-y-1 overflow-y-auto max-h-full">
              {activeAlerts.map((alert) => (
                <div key={alert.id} className="border border-gray-200 rounded p-2">
                  <div className="flex items-start justify-between mb-1">
                    <div className="flex items-center min-w-0">
                      {getSeverityIcon(alert.severity)}
                      <div className="ml-2 min-w-0">
                        <h3 className="text-xs font-semibold text-gray-900 truncate">{alert.title}</h3>
                        <p className="text-xs text-gray-600 truncate">{alert.description}</p>
                      </div>
                    </div>
                    <span className={`px-1.5 py-0.5 rounded text-xs font-medium flex-shrink-0 ml-2 ${getSeverityColor(alert.severity)}`}>
                      {alert.severity}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{alert.ecosystem}</span>
                    <span>{alert.timestamp} • {alert.duration}</span>
                  </div>
                  <div className="flex space-x-1 mt-1">
                    <button className="px-2 py-0.5 text-xs bg-blue-600 text-white rounded hover:bg-blue-700">
                      Résoudre
                    </button>
                    <button className="px-2 py-0.5 text-xs bg-gray-100 text-gray-600 rounded hover:bg-gray-200">
                      Escalader
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Resolved Alerts */}
          <div className="bg-white border border-gray-200 rounded p-2">
            <div className="flex items-center justify-between mb-2">
              <h2 className="text-sm font-semibold text-gray-900">Alertes Résolues</h2>
              <span className="px-2 py-0.5 text-xs font-medium bg-green-100 text-green-600 rounded">
                {resolvedAlerts.length} résolues
              </span>
            </div>
            <div className="space-y-1 overflow-y-auto max-h-full">
              {resolvedAlerts.map((alert) => (
                <div key={alert.id} className="border border-gray-200 rounded p-2 opacity-75">
                  <div className="flex items-start justify-between mb-1">
                    <div className="flex items-center min-w-0">
                      <CheckCircle className="h-4 w-4 text-green-500 flex-shrink-0" />
                      <div className="ml-2 min-w-0">
                        <h3 className="text-xs font-semibold text-gray-900 truncate">{alert.title}</h3>
                        <p className="text-xs text-gray-600 truncate">{alert.description}</p>
                      </div>
                    </div>
                    <span className="px-1.5 py-0.5 rounded text-xs font-medium bg-green-100 text-green-600 flex-shrink-0 ml-2">
                      Résolu
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{alert.ecosystem}</span>
                    <span>Durée: {alert.duration}</span>
                  </div>
                  <div className="text-xs text-gray-500 mt-1">
                    Détecté: {alert.timestamp} • Résolu: {alert.resolvedAt}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
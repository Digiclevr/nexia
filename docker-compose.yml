# =====================================================
# NEXIA Full-Stack Application - Docker Compose
# =====================================================
# Description: Complete containerized NEXIA monitoring stack
# Components: PostgreSQL, API, Frontend, Nginx
# =====================================================

version: '3.8'

services:
  # =====================================================
  # DATABASE - PostgreSQL
  # =====================================================
  database:
    image: postgres:15-alpine
    container_name: nexia-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: nexia_monitoring
      POSTGRES_USER: nexia_user
      POSTGRES_PASSWORD: nexia_secure_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexia_user -d nexia_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nexia-network

  # =====================================================
  # API - Node.js Backend
  # =====================================================
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: nexia-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=nexia_monitoring
      - DB_USER=nexia_user
      - DB_PASSWORD=nexia_secure_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - API_RATE_LIMIT_WINDOW_MS=900000
      - API_RATE_LIMIT_MAX_REQUESTS=1000
      - LOG_LEVEL=info
      - FRONTEND_URL=http://localhost
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nexia-network

  # =====================================================
  # FRONTEND - React Application
  # =====================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nexia-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost/api
      - REACT_APP_APP_NAME=NEXIA
      - REACT_APP_VERSION=1.0.0
    depends_on:
      - api
    networks:
      - nexia-network

  # =====================================================
  # REVERSE PROXY - Nginx
  # =====================================================
  nginx:
    image: nginx:alpine
    container_name: nexia-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - nexia-network

  # =====================================================
  # MONITORING SCHEDULER (Optional)
  # =====================================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    container_name: nexia-scheduler
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api:3001/api/v1
      - CLUSTER_NAME=docker-cluster
      - SCHEDULE=0 */1 * * * # Every hour
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ~/.kube:/root/.kube:ro
    depends_on:
      - api
    networks:
      - nexia-network

# =====================================================
# VOLUMES
# =====================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /users/ludovicpilet/projects/NEXIA/data/postgres
  
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /users/ludovicpilet/projects/NEXIA/data/logs

# =====================================================
# NETWORKS
# =====================================================
networks:
  nexia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================================
# ADDITIONAL SERVICES (for development)
# =====================================================
  # Redis (for caching - optional)
  redis:
    image: redis:7-alpine
    container_name: nexia-redis
    restart: unless-stopped
    command: redis-server --requirepass nexia_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexia-network
    profiles:
      - dev
      - full

  # Adminer (database management - development only)
  adminer:
    image: adminer
    container_name: nexia-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - database
    networks:
      - nexia-network
    profiles:
      - dev

# =====================================================
# ADDITIONAL VOLUMES
# =====================================================
  redis_data: